// JS Fundamentals - Module 3
// Student: Boris Tadic

// ---------------------------------------
// Exercise 1: Type coercion
// ---------------------------------------
console.log('Exercise 1 Results:');
// "" + 1 + 0 = "10" ("" + 1 = "1", then "1" + 0 = "10")
console.log("" + 1 + 0); // "10"

// "" - 1 + 0 = -1 ("" becomes 0, so 0 - 1 = -1)
console.log("" - 1 + 0); // -1

// true + false = 1 (true → 1, false → 0)
console.log(true + false); // 1

// !true = false
console.log(!true); // false

// 6 / "3" = 2 ("3" coerced to number)
console.log(6 / "3"); // 2

// "2" * "3" = 6
console.log("2" * "3"); // 6

// 4 + 5 + "px" = "9px" (4 + 5 = 9, then + "px")
console.log(4 + 5 + "px"); // "9px"

// "$" + 4 + 5 = "$45"
console.log("$" + 4 + 5); // "$45"

// "4" - 2 = 2
console.log("4" - 2); // 2

// "4px" - 2 = NaN
console.log("4px" - 2); // NaN

// "  -9  " + 5 = "  -9  5"
console.log("  -9  " + 5); // "  -9  5"

// "  -9  " - 5 = -14
console.log("  -9  " - 5); // -14

// null + 1 = 1
console.log(null + 1); // 1

// undefined + 1 = NaN
console.log(undefined + 1); // NaN

// undefined == null = true (loose equality)
console.log(undefined == null); // true

// undefined === null = false (strict equality)
console.log(undefined === null); // false

// " \t \n" - 2 = -2 (whitespace string coerced to 0)
console.log(" \t \n" - 2); // -2

// ---------------------------------------
// Exercise 2: Type coercion fix
// ---------------------------------------
console.log('\nExercise 2 Results:');
let three = "3";
let four = "4";
let thirty = "30";

// String concatenation (not numeric addition)
let addition = three + four; // "34"
console.log(addition);

// Numeric conversion for actual math
let multiplication = three * four; // 12
console.log(multiplication);

let division = three / four; // 0.75
console.log(division);

let subtraction = three - four; // -1
console.log(subtraction);

let lessThan1 = three < four; // true (lexicographical)
console.log(lessThan1); // true

let lessThan2 = thirty < four; // true (string compare: "3" < "4")
console.log(lessThan2); // true — fix by converting to number

console.log(Number(thirty) < Number(four)); // false

// ---------------------------------------
// Exercise 3: Truthy/Falsy
// ---------------------------------------
console.log('\nExercise 3 Results:');
if (0) console.log('#1 zero is true'); // falsy
if ("0") console.log('#2 zero is true'); // truthy
if (null) console.log('null is true'); // falsy
if (-1) console.log('negative is true'); // truthy
if (1) console.log('positive is true'); // truthy

// ---------------------------------------
// Exercise 4: Ternary operator
// ---------------------------------------
console.log('\nExercise 4 Results:');
let a = 2, b = 3;
let result = `${a} + ${b} is `;
result += (a + b < 10) ? 'less than 10' : 'greater than 10';
console.log(result);

// ---------------------------------------
// Exercise 5: Function expressions
// ---------------------------------------
console.log('\nExercise 5 Results:');
// a) Function expression
const getGreeting1 = function(name) {
  return 'Hello ' + name + '!';
};

// b) Arrow function
const getGreeting2 = (name) => 'Hello ' + name + '!';

console.log(getGreeting1('Boris'));
console.log(getGreeting2('Tadic'));

// ---------------------------------------
// Exercise 6: Object methods and conditionals
// ---------------------------------------
console.log('\nExercise 6 Results:');
const westley = { name: 'Westley', numFingers: 5 };
const rugen = { name: 'Count Rugen', numFingers: 6 };

const inigo = {
  firstName: 'Inigo',
  lastName: 'Montoya',
  greeting(person) {
    let greeting = `Hello ${person.name}, my name is ${this.firstName} ${this.lastName}. `;
    console.log(greeting + this.getCatchPhrase(person));
  },
  getCatchPhrase: (person) =>
    person.numFingers === 6
      ? "You killed my father. Prepare to die."
      : "Nice to meet you.",
};

inigo.greeting(westley);
inigo.greeting(rugen);

// ---------------------------------------
// Exercise 7: Chainable object methods
// ---------------------------------------
console.log('\nExercise 7 Results:');
const basketballGame = {
  score: 0,
  fouls: 0,
  freeThrow() { this.score++; return this; },
  basket() { this.score += 2; return this; },
  threePointer() { this.score += 3; return this; },
  foul() { this.fouls++; return this; },
  halfTime() {
    console.log(`Halftime score is ${this.score} | Fouls: ${this.fouls}`);
    return this;
  },
  fullTime() {
    console.log(`Fulltime score is ${this.score} | Fouls: ${this.fouls}`);
    return this;
  }
};

basketballGame.basket().freeThrow().foul().threePointer().halfTime().basket().foul().fullTime();

// ---------------------------------------
// Exercise 8: City printer
// ---------------------------------------
console.log('\nExercise 8 Results:');
function printCityInfo(cityObj) {
  for (let key in cityObj) {
    console.log(`${key}: ${cityObj[key]}`);
  }
}

const sydney = {
  name: 'Sydney',
  population: 5_121_000,
  state: 'NSW',
  founded: '26 January 1788',
  timezone: 'Australia/Sydney'
};

const melbourne = {
  name: 'Melbourne',
  population: 4_936_349,
  state: 'VIC',
  founded: '30 August 1835',
  timezone: 'Australia/Melbourne'
};

printCityInfo(sydney);
printCityInfo(melbourne);

// ---------------------------------------
// Exercise 9: Objects by reference
// ---------------------------------------
console.log('\nExercise 9 Results:');
let teamSports = ['Hockey', 'Cricket', 'Volleyball'];
let dog1 = 'Bingo';
let cat1 = { name: 'Fluffy', breed: 'Siberian' };

// a)
let moreSports = [...teamSports];
moreSports.push('Soccer');
moreSports.unshift('Tennis');

// b)
let dog2 = dog1;
dog2 = 'Charlie'; // primitive – does not affect original

// c)
let cat2 = { ...cat1 };
cat2.name = 'Whiskers'; // clone object

// d)
console.log('teamSports:', teamSports); // unchanged
console.log('dog1:', dog1); // unchanged
console.log('cat1:', cat1); // unchanged

// ---------------------------------------
// Exercise 10: Constructor and class
// ---------------------------------------
console.log('\nExercise 10 Results:');
// a–c
function Person(name, age) {
  this.name = name;
  this.age = age;
  this.human = true;
  this.canDrive = function () {
    return this.age >= 18;
  };
}

let person1 = new Person('Alice', 25);
let person2 = new Person('Bob', 15);
console.log(person1, 'Can drive:', person1.canDrive());
console.log(person2, 'Can drive:', person2.canDrive());

// d–e
class PersonClass {
  constructor(name, age) {
    this.name = name;
    this.age = age;
    this.human = true;
  }

  canDrive() {
    return this.age >= 18;
  }
}

let person3 = new PersonClass('Charlie', 30);
console.log(person3, 'Can drive:', person3.canDrive());
