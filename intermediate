// JS Intermediate Lab – Boris Tadic
// Run using: node js-intermediate.js

/* ====================
   Exercise 1 – Capitalize Each Word
   ==================== */
function ucFirstLetters(str) {
    return str
        .split(' ')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
}
console.log(ucFirstLetters("los angeles")); // Los Angeles

/* ====================
   Exercise 2 – Truncate String
   ==================== */
function truncate(str, max) {
    return str.length > max ? str.slice(0, max) + '...' : str;
}
const truncate2 = (str, max) => str.length > max ? str.slice(0, max) + '...' : str;
console.log(truncate('This text will be truncated if it is too long', 25));

/* ====================
   Exercise 3 – Array Operations
   ==================== */
const animals = ['Tiger', 'Giraffe'];
animals.push('Elephant', 'Zebra');
animals.unshift('Bear', 'Koala');
animals.sort();
function replaceMiddleAnimal(newValue) {
    const mid = Math.floor(animals.length / 2);
    animals[mid] = newValue;
}
function findMatchingAnimals(beginsWith) {
    return animals.filter(a => a.toLowerCase().startsWith(beginsWith.toLowerCase()));
}
replaceMiddleAnimal('Penguin');
console.log(findMatchingAnimals('B'));

/* ====================
   Exercise 4 – camelCase CSS Properties
   ==================== */
function camelCase(cssProp) {
    return cssProp.split('-').map((word, i) =>
        i === 0 ? word : word.charAt(0).toUpperCase() + word.slice(1)
    ).join('');
}
console.log(camelCase('margin-left'));

/* ====================
   Exercise 5 – Floating Point Math
   ==================== */
let twentyCents = 0.20;
let tenCents = 0.10;
console.log(`${twentyCents} + ${tenCents} = ${twentyCents + tenCents}`); // explanation in comment
function currencyAddition(float1, float2) {
    return (Math.round(float1 * 100) + Math.round(float2 * 100)) / 100;
}
function currencyOperation(f1, f2, op, numDecimals = 2) {
    const factor = Math.pow(10, numDecimals);
    let result;
    switch(op) {
        case '+': result = (Math.round(f1 * factor) + Math.round(f2 * factor)) / factor; break;
        case '-': result = (Math.round(f1 * factor) - Math.round(f2 * factor)) / factor; break;
        case '*': result = (Math.round(f1 * factor) * Math.round(f2 * factor)) / (factor * factor); break;
        case '/': result = (Math.round(f1 * factor) / Math.round(f2 * factor)); break;
    }
    return parseFloat(result.toFixed(numDecimals));
}
console.log(currencyAddition(0.1, 0.2));
console.log(currencyOperation(0.1, 0.2, '+'));

/* ====================
   Exercise 6 – Unique Values
   ==================== */
function unique(arr) {
    return [...new Set(arr)];
}
const colours = ['red', 'green', 'blue', 'yellow', 'orange', 'red', 'blue', 'yellow'];
console.log(unique(colours));

/* ====================
   Exercise 7 – Book Functions
   ==================== */
const books = [
    { id: 1, title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', year: 1925 },
    { id: 2, title: 'To Kill a Mockingbird', author: 'Harper Lee', year: 1960 },
    { id: 3, title: '1984', author: 'George Orwell', year: 1949 },
    { id: 4, title: 'Brave New World', author: 'Aldous Huxley', year: 1932 },
    { id: 5, title: 'The Catcher in the Rye', author: 'J.D. Salinger', year: 1951 }
];

function getBookTitle(bookId) {
    return books.find(book => book.id === bookId)?.title;
}
function getOldBooks() {
    return books.filter(book => book.year < 1950);
}
function addGenre() {
    return books.map(book => ({ ...book, genre: 'classic' }));
}

/* ====================
   Exercise 8 – Maps
   ==================== */
const phoneBookABC = new Map([
    ['Annabelle', '0412312343'],
    ['Barry', '0433221117'],
    ['Caroline', '0455221182']
]);

const phoneBookDEF = new Map([
    ['Daniel', '0444555666'],
    ['Ella', '0422333444'],
    ['Frank', '0411999888']
]);

phoneBookABC.set('Caroline', '0455000000');

function printPhoneBook(map) {
    for (let [name, number] of map) {
        console.log(`${name}: ${number}`);
    }
}

const phoneBook = new Map([...phoneBookABC, ...phoneBookDEF]);
console.log([...phoneBook.keys()]);

/* ====================
   Exercise 9 – Salaries
   ==================== */
let salaries = {
    "Timothy": 35000,
    "David": 25000,
    "Mary": 55000,
    "Christina": 75000,
    "James": 43000
};

function sumSalaries(salaries) {
    return Object.values(salaries).reduce((acc, curr) => acc + curr, 0);
}
function topEarner(salaries) {
    let max = 0, top = '';
    for (let [name, salary] of Object.entries(salaries)) {
        if (salary > max) {
            max = salary;
            top = name;
        }
    }
    return top;
}

/* ====================
   Exercise 10 – Date
   ==================== */
const today = new Date();
console.log('Current time is ' + today.toLocaleTimeString());
console.log(today.getHours() + ' hours have passed so far today');
console.log(today.getHours() * 60 + today.getMinutes() + ' minutes have passed so far today');
console.log(today.getHours() * 3600 + today.getMinutes() * 60 + today.getSeconds() + ' seconds have passed so far today');

function calculateAge(birthDate) {
    const today = new Date();
    let years = today.getFullYear() - birthDate.getFullYear();
    let months = today.getMonth() - birthDate.getMonth();
    let days = today.getDate() - birthDate.getDate();
    if (days < 0) {
        months -= 1;
        days += 30; // approx
    }
    if (months < 0) {
        years -= 1;
        months += 12;
    }
    console.log(`I am ${years} years, ${months} months and ${days} days old`);
}
calculateAge(new Date('1995-04-10'));

function daysInBetween(date1, date2) {
    const diff = Math.abs(date2 - date1);
    return Math.floor(diff / (1000 * 60 * 60 * 24));
}
console.log(daysInBetween(new Date('2024-01-01'), new Date()));
